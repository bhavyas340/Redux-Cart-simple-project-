{"ast":null,"code":"import { cartActions } from \"./cart-slice\";\nimport { uiActions } from \"./ui-slice\";\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch('https://redux-cart-72773-default-rtdb.firebaseio.com/cart.json');\n      console.log(\"work\");\n      if (!response.ok) {\n        throw new Error('Could not fetch cart data!');\n      }\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.replaceCart({\n        item\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending',\n      message: 'Sending cart data!'\n    }));\n    const sendRequest = async () => {\n      const response = await fetch('https://redux-cart-72773-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify({\n          items: cart.items,\n          totalQuantity: cart.totalQuantity\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Sending cart data failed.');\n      }\n    };\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'success!',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};","map":{"version":3,"names":["cartActions","uiActions","fetchCartData","dispatch","fetchData","response","fetch","console","log","ok","Error","data","json","cartData","replaceCart","item","error","showNotification","status","title","message","sendCartData","cart","sendRequest","method","body","JSON","stringify","items","totalQuantity"],"sources":["/Users/bhavyadeepsharma/Downloads/01-starting-project-2/src/store/cart-actions.js"],"sourcesContent":["import { cartActions } from \"./cart-slice\"\nimport { uiActions } from \"./ui-slice\"\n\n\nexport const fetchCartData=()=>{\n    return async (dispatch) =>{\n        const fetchData = async ()=>{\n            const response = await fetch('https://redux-cart-72773-default-rtdb.firebaseio.com/cart.json'\n            );\n\n            console.log(\"work\")\n            if(!response.ok){\n                throw new Error('Could not fetch cart data!')\n            }\n            const data = await response.json();\n\n            return data;\n        }\n\n            try{\n                const cartData = await fetchData();\n                dispatch(cartActions.replaceCart({\n                    item\n                }))\n            } catch (error){\n                dispatch(uiActions.showNotification({\n                    status:'error',\n                    title:'Error!',\n                    message:'Sending cart data failed!',\n                  })\n                 )\n            }\n        \n    }\n}\nexport const sendCartData =  (cart) =>{\n    return async (dispatch)=> {\n        dispatch(\n            uiActions.showNotification({\n            status:'pending',\n            title:'Sending',\n            message:'Sending cart data!',\n          }))\n\n          const sendRequest  =  async ()=>{\n            const response = await fetch('https://redux-cart-72773-default-rtdb.firebaseio.com/cart.json', {\n                method: 'PUT',\n                body: JSON.stringify({items:cart.items, \n                    totalQuantity: cart.totalQuantity\n                }),\n              });\n          \n              if(!response.ok){\n                throw new Error('Sending cart data failed.')\n              }\n          }\n\n          try{\n            await sendRequest();\n            dispatch(uiActions.showNotification({\n                status:'success',\n                title:'success!',\n                message:'Sent cart data successfully!',\n              })\n            )\n          } catch(error){\n            dispatch(uiActions.showNotification({\n                status:'error',\n                title:'Error!',\n                message:'Sending cart data failed!',\n              })\n             )\n          }\n         \n\n          \n    }\n}"],"mappings":"AAAA,SAASA,WAAW,QAAQ,cAAc;AAC1C,SAASC,SAAS,QAAQ,YAAY;AAGtC,OAAO,MAAMC,aAAa,GAACA,CAAA,KAAI;EAC3B,OAAO,MAAOC,QAAQ,IAAI;IACtB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAU;MACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAC7B,CAAC;MAEDC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnB,IAAG,CAACH,QAAQ,CAACI,EAAE,EAAC;QACZ,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MACjD;MACA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAElC,OAAOD,IAAI;IACf,CAAC;IAEG,IAAG;MACC,MAAME,QAAQ,GAAG,MAAMT,SAAS,CAAC,CAAC;MAClCD,QAAQ,CAACH,WAAW,CAACc,WAAW,CAAC;QAC7BC;MACJ,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,OAAOC,KAAK,EAAC;MACXb,QAAQ,CAACF,SAAS,CAACgB,gBAAgB,CAAC;QAChCC,MAAM,EAAC,OAAO;QACdC,KAAK,EAAC,QAAQ;QACdC,OAAO,EAAC;MACV,CAAC,CACF,CAAC;IACN;EAER,CAAC;AACL,CAAC;AACD,OAAO,MAAMC,YAAY,GAAKC,IAAI,IAAI;EAClC,OAAO,MAAOnB,QAAQ,IAAI;IACtBA,QAAQ,CACJF,SAAS,CAACgB,gBAAgB,CAAC;MAC3BC,MAAM,EAAC,SAAS;MAChBC,KAAK,EAAC,SAAS;MACfC,OAAO,EAAC;IACV,CAAC,CAAC,CAAC;IAEH,MAAMG,WAAW,GAAK,MAAAA,CAAA,KAAU;MAC9B,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAgE,EAAE;QAC3FkB,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAACC,KAAK,EAACN,IAAI,CAACM,KAAK;UAClCC,aAAa,EAAEP,IAAI,CAACO;QACxB,CAAC;MACH,CAAC,CAAC;MAEF,IAAG,CAACxB,QAAQ,CAACI,EAAE,EAAC;QACd,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;IACJ,CAAC;IAED,IAAG;MACD,MAAMa,WAAW,CAAC,CAAC;MACnBpB,QAAQ,CAACF,SAAS,CAACgB,gBAAgB,CAAC;QAChCC,MAAM,EAAC,SAAS;QAChBC,KAAK,EAAC,UAAU;QAChBC,OAAO,EAAC;MACV,CAAC,CACH,CAAC;IACH,CAAC,CAAC,OAAMJ,KAAK,EAAC;MACZb,QAAQ,CAACF,SAAS,CAACgB,gBAAgB,CAAC;QAChCC,MAAM,EAAC,OAAO;QACdC,KAAK,EAAC,QAAQ;QACdC,OAAO,EAAC;MACV,CAAC,CACF,CAAC;IACJ;EAIN,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}